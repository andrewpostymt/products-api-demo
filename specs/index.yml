openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Products & Orders API'
  description: |
    ## Overview
    The **Products & Orders API** lets you manage a simple product catalog and customer orders.
    It is designed for demos and quick prototyping and follows common REST conventions.

    ### Authentication
    Authenticate every request with an API key in the `X-Api-Key` header.

    ### Environments
    Use the **Local Development** and **Postman Mock** servers during development, and the **Staging** server for integration testing. Production endpoints can be added as additional servers when ready.

    ### Errors
    Errors return a status code and a message in a simple, consistent structure.
  contact:
    email: joe@example.com
    url: https://www.example.com

servers:
  - url: 'http://localhost:3000'
    description: Local Development Server
  - url: 'https://staging.amazonaws.com/latest'
    description: Staging Server

tags:
  - name: Products
    description: Manage the product catalog (create, list, view, update, delete).
  - name: Orders
    description: Work with orders (create, list, view, update, delete).

paths:
  /api/products:
    get:
      summary: 'List products'
      description: Returns a list of products.
      operationId: getProducts
      tags:
        - Products
      responses:
        '200':
          description: 'A list of current products'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsList'
              examples:
                sample:
                  summary: Two sample products
                  value:
                    - id: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
                      name: "Bose Noise Cancelling Over-Ear Headphones 700 (Black)"
                      description: "11 levels of noise cancelling. 20 hours of battery life."
                      model: "794297-0100"
                      sku: "394807"
                      cost: 445
                      imageUrl: "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/394807.jpg"
                    - id: "b2805cde-f34f-4945-9fec-3e096fef4bcc"
                      name: "Mechanical Keyboard â€” 87 keys"
                      description: "Hot-swappable switches. White backlight."
                      model: "MK-87"
                      sku: "KB-001"
                      cost: 109.99
                      imageUrl: "https://example.com/images/keyboard.jpg"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Create product'
      description: Creates a new product. Provide all required fields.
      operationId: createProduct
      tags:
        - Products
      requestBody:
        description: Product information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
            examples:
              sample:
                summary: Create a set of headphones
                value:
                  name: "Bose Noise Cancelling Over-Ear Headphones 700 (Black)"
                  description: "11 levels of noise cancelling. 20 hours of battery life."
                  model: "794297-0100"
                  sku: "394807"
                  cost: 445
                  imageUrl: "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/394807.jpg"
      responses:
        # '201':
        #   description: 'Product was created successfully'
        #   headers:
        #     Location:
        #       schema:
        #         $ref: '#/components/schemas/Url'
        #       description: The URL of the new product that was just created.
        #     Content-Type:
        #       schema:
        #         $ref: '#/components/schemas/MediaTypeString'
        #       example: application/json
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/ViewProduct'
        #       examples:
        #         created:
        #           summary: Created product response
        #           value:
        #             id: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
        #             name: "Bose Noise Cancelling Over-Ear Headphones 700 (Black)"
        #             description: "11 levels of noise cancelling. 20 hours of battery life."
        #             model: "794297-0100"
        #             sku: "394807"
        #             cost: 445
        #             imageUrl: "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/394807.jpg"
        #   links:
        #     GetProductById:
        #       operationId: getProductById
        #       parameters:
        #         productId: '$response.body#/id'
        #   x-postman-variables:
        #     - type: save
        #       name: productId
        #       path: .id
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/products/{productId}:
    parameters:
      - in: path
        name: productId
        schema:
          $ref: '#/components/schemas/ProductId'
        required: true
        description: Product ID to retrieve
        x-postman-variables:
          - type: load
            name: productId
    get:
      summary: 'Get product'
      description: Retrieves a product by ID.
      operationId: getProductById
      tags:
        - Products
      responses:
        '200':
          description: 'Product retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProduct'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: 'Update product'
      description: Updates an existing product by ID.
      operationId: updateProductById
      tags:
        - Products
      requestBody:
        description: Product information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: 'Product was updated successfully'
          headers:
            Location:
              schema:
                $ref: '#/components/schemas/Url'
              description: The URL of the product that was just updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProduct'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: 'Delete product'
      description: Deletes a product by ID.
      operationId: deleteProduct
      tags:
        - Products
      responses:
        '204':
          description: 'Product deleted successfully'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/orders:
    get:
      summary: 'List orders'
      description: Returns a list of orders.
      operationId: getOrders
      tags:
        - Orders
      responses:
        '200':
          description: 'A list of current orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersList'
              examples:
                sample:
                  summary: Two orders
                  value:
                    - id: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
                      status: "OPEN"
                      date: "2022-03-12T23:20:50.52Z"
                      productIds: ["a1805cde-f34f-4945-9fec-3e096fef4bdd"]
                      cost: 948.32
                      tax: 94.83
                      taxRate: 10
                      total: 999.99
                    - id: "c3805cde-f34f-4945-9fec-3e096fef4baa"
                      status: "PAID"
                      date: "2022-03-14T12:00:00Z"
                      productIds: ["b2805cde-f34f-4945-9fec-3e096fef4bcc"]
                      cost: 109.99
                      tax: 10.99
                      taxRate: 10
                      total: 120.98
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Create order'
      description: Creates a new order.
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        description: Order information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
            examples:
              sample:
                value:
                  status: "OPEN"
                  date: "2022-03-12T23:20:50.52Z"
                  productIds: ["a1805cde-f34f-4945-9fec-3e096fef4bdd"]
                  cost: 948.32
                  tax: 94.83
                  taxRate: 10
                  total: 999.99
      responses:
        '201':
          description: 'Order was created successfully'
          headers:
            Location:
              schema:
                $ref: '#/components/schemas/Url'
              description: The URL of the new order that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewOrder'
          links:
            GetOrderById:
              operationId: getOrderById
              parameters:
                orderId: '$response.body#/id'
          x-postman-variables:
            - type: save
              name: orderId
              path: .id
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/orders/{orderId}:
    parameters:
      - in: path
        name: orderId
        schema:
          $ref: '#/components/schemas/OrderId'
        required: true
        description: Order ID to retrieve
        x-postman-variables:
          - type: load
            name: orderId
    get:
      summary: 'Get order'
      description: Retrieves an order by ID.
      operationId: getOrderById
      tags:
        - Orders
      responses:
        '200':
          description: 'Order retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewOrder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: 'Update order'
      description: Updates an existing order by ID.
      operationId: updateOrderById
      tags:
        - Orders
      requestBody:
        description: Order information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '200':
          description: 'Order was updated successfully'
          headers:
            Location:
              schema:
                $ref: '#/components/schemas/Url'
              description: The URL of the order that was just updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewOrder'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: 'Delete order'
      description: Deletes an order by ID.
      operationId: deleteOrder
      tags:
        - Orders
      responses:
        '204':
          description: 'Order deleted successfully'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    BadRequestError:
      description: The request was invalid or cannot be otherwise served.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            badRequest:
              value:
                status: "400"
                message: "Validation failed for field 'name'"
    UnauthorizedError:
      description: Missing or invalid API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            unauthorized:
              value:
                status: "401"
                message: "Unauthorized"
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            notFound:
              value:
                status: "404"
                message: "Resource not found"
    ConflictError:
      description: The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            conflict:
              value:
                status: "409"
                message: "Duplicate SKU"
    ServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            serverError:
              value:
                status: "500"
                message: "Internal server error"

  schemas:
    # ---------- Common primitives ----------
    Url:
      type: string
      format: uri
      description: Absolute URL.
      example: "https://api.example.com/resource/123"
    MediaTypeString:
      type: string
      description: HTTP media type string.
      example: application/json

    # ---------- Reusable primitives (Product) ----------
    ProductId:
      type: string
      format: uuid
      description: The ID of the Product
      example: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
    ProductName:
      type: string
      description: The name of the Product
      minLength: 5
      maxLength: 1000
      example: "Bose Noise Cancelling Over-Ear Headphones 700 (Black)"
    ProductDescription:
      type: string
      description: The description of the Product
      minLength: 5
      maxLength: 1000
      example: "11 levels of noise cancelling. 20 hours of battery life."
    ProductModel:
      type: string
      description: The model number of the Product
      minLength: 1
      maxLength: 99
      example: "794297-0100"
    ProductSku:
      type: string
      description: The SKU of the Product
      minLength: 1
      maxLength: 1000
      example: "394807"
    ProductSkuNew:
      type: string
      description: The SKU of the Product
      minLength: 1
      maxLength: 99
      example: "394807"
    ProductCost:
      type: number
      format: float
      description: The cost of the Product
      minimum: 0
      maximum: 1000
      example: 445
    ProductImageUrl:
      type: string
      format: uri
      description: The URL to the image of the Product
      minLength: 1
      maxLength: 1000
      example: "https://cdn.shopify.com/s/files/1/0024/9803/5810/products/394807.jpg"

    # ---------- Reusable primitives (Order) ----------
    OrderId:
      type: string
      format: uuid
      description: The ID of the Order
      example: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
    OrderStatus:
      type: string
      description: The status of the Order
      enum: [OPEN, PAID, SHIPPED, RECEIVED]
      example: "OPEN"
    OrderDate:
      type: string
      format: date-time
      description: The date of the Order
      example: "2022-03-12T23:20:50.52Z"
    ProductIdLoose:
      type: string
      description: The product ID (not strictly UUID for create flow)
      minLength: 1
      maxLength: 1000
      example: "a1805cde-f34f-4945-9fec-3e096fef4bdd"
    ProductIdArray:
      type: array
      description: List of Product IDs
      items:
        $ref: '#/components/schemas/ProductId'
    ProductIdArrayNew:
      type: array
      description: List of Product IDs for creation
      items:
        $ref: '#/components/schemas/ProductIdLoose'
    Money0to1000:
      type: number
      format: float
      minimum: 0
      maximum: 1000
      example: 999.99
    Money0to99:
      type: number
      format: float
      minimum: 0
      maximum: 99
      example: 94.83
    TaxRatePercent:
      type: number
      format: float
      description: The percentage at which sales tax is calculated
      minimum: 1
      maximum: 99
      example: 10

    # ---------- Collections ----------
    ProductsList:
      type: array
      items:
        $ref: '#/components/schemas/ViewProduct'
    OrdersList:
      type: array
      items:
        $ref: '#/components/schemas/ViewOrder'

    # ---------- Aggregate models (all properties via $ref) ----------
    ViewProduct:
      type: object
      required: [id, name, description, model, sku, cost, imageUrl]
      properties:
        id:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/ProductName'
        description:
          $ref: '#/components/schemas/ProductDescription'
        model:
          $ref: '#/components/schemas/ProductModel'
        sku:
          $ref: '#/components/schemas/ProductSku'
        cost:
          $ref: '#/components/schemas/ProductCost'
        imageUrl:
          $ref: '#/components/schemas/ProductImageUrl'

    NewProduct:
      type: object
      required: [name, description, model, sku, cost, imageUrl]
      properties:
        name:
          $ref: '#/components/schemas/ProductName'
        description:
          $ref: '#/components/schemas/ProductDescription'
        model:
          $ref: '#/components/schemas/ProductModel'
        sku:
          $ref: '#/components/schemas/ProductSkuNew'
        cost:
          $ref: '#/components/schemas/ProductCost'
        imageUrl:
          $ref: '#/components/schemas/ProductImageUrl'

    ViewOrder:
      type: object
      required: [id, status, date, productIds, cost, tax, taxRate, total]
      properties:
        id:
          $ref: '#/components/schemas/OrderId'
        status:
          $ref: '#/components/schemas/OrderStatus'
        date:
          $ref: '#/components/schemas/OrderDate'
        productIds:
          $ref: '#/components/schemas/ProductIdArray'
        cost:
          $ref: '#/components/schemas/Money0to1000'
        tax:
          $ref: '#/components/schemas/Money0to1000'
        taxRate:
          $ref: '#/components/schemas/TaxRatePercent'
        total:
          $ref: '#/components/schemas/Money0to1000'

    NewOrder:
      type: object
      required: [status, date, productIds, cost, tax, taxRate, total]
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        date:
          $ref: '#/components/schemas/OrderDate'
        productIds:
          $ref: '#/components/schemas/ProductIdArrayNew'
        cost:
          $ref: '#/components/schemas/Money0to1000'
        tax:
          $ref: '#/components/schemas/Money0to99'
        taxRate:
          $ref: '#/components/schemas/TaxRatePercent'
        total:
          $ref: '#/components/schemas/Money0to1000'

    HttpStatusString:
      type: string
      description: HTTP status code as a string.
      minLength: 1
      maxLength: 99
      example: "400"
    ErrorMessageString:
      type: string
      description: Human-readable message describing the error.
      minLength: 1
      maxLength: 2000
      example: "The service did not work as expected."
    Error:
      type: object
      required: [status]
      properties:
        status:
          $ref: '#/components/schemas/HttpStatusString'
        message:
          $ref: '#/components/schemas/ErrorMessageString'

  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key

security:
  - ApiKey: []
